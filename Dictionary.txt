● 펌웨어
1. 하드웨어를 제어하고 작동시키는 데 사용되는 소프트웨어. 하드웨어의 '뇌'와 같은 역할을 수행

2. 하드웨어와 운영 체제(OS) 사이의 중개자 역할을 하며, 하드웨어의 기본적인 기능을 담당

3. 특정 하드웨어 부품(예: 마이크로칩)에 내장되어 해당 하드웨어가 어떻게 작동해야 하는지에 대한 지침을 제어

4. 전원이 꺼져도 내용이 지워지지 않는 비휘발성 메모리(ROM, EPROM, 플래시 메모리 등)에 저장

5. 운영 체제(예: 윈도우, macOS)가 하드웨어를 인식하고 사용할 수 있도록 도움.

6. ex) 컴퓨터: BIOS(기본 입출력 시스템) 또는 UEFI(통합 확장 펌웨어 인터페이스). 컴퓨터를 켰을 때, 하드웨어(CPU, RAM, 하드 드라이브 등)를 초기화하고 운영 체제(OS)를 불러옴
       스마트폰: 하드웨어 부품(카메라, 터치스크린, 통신 모듈)을 제어하고, 운영 체제(안드로이드, iOS)와 통신하는 역할을 함
       라우터: 인터넷 연결을 관리하고 WI-FI 신호를 제어.
       카메라: 이미지 센서, 셔터 속도, 노출 등 카메라의 기본적인 기능을 제어

● 인터페이스
1. 2개 이상의 장치나 소프트웨어 사이에 정보나 신호를 주고 받을 수 있도록 하는 매개체

2. 하드웨어 인터페이스 : 서로 다른 하드웨어 장치들이 통신하고 데이터를 교환할 수 있도록 하는 물리적 연결부 ex) USB 포트
   소프트웨어 인터페이스 : 두 개 이상의 소프트웨어 모듈이나 프로그램이 서로 정보를 주고받을 수 있도록 하는 통신 규약이나 방식 ex) API
   사용자 인터페이스(UI) : 사용자가 컴퓨터나 기계 등 시스템과 상호작용할 수 있도록 하는 물리적, 가상적 매개체 ex) CLI, GUI, NUI

● 크로스 컴파일
1. 현재 사용 중인 컴퓨터(호스트 시스템)와는 다른 종류의 하드웨어 또는 운영체제를 가진 다른 컴퓨터(타겟 시스템)에서 실행될 코드를 생성하는 과정 ex) 냉장고, 자동차 등 특수 목적의 기기(임베디드 시스템)에 들어갈 소프트웨어를 PC에서 개발하여 해당 기기에 맞는 코드로 변환

● 모듈
1. 특정 기능을 담고 있는 코드 파일. 여러 함수, 변수, 클래스 등을 하나의 파일로 묶어 필요할 때마다 가져다 쓸 수 있는 것
2. 한 번 만든 코드를 반복적으로 사용할 수 있음 ex) 수학 계산 관련 함수들을 math.c/c++ 또는 math.py라는 모듈에 저장해두면, #include <math.h> 또는 import math 명령어로 가져와서 사용 가능
3. 유지보수가 용이하고 같은 함수나 변수 이름이 다른 코드와 충돌하는 것을 막을 수 있음

● OpenWrt
1. OpenWrt는 임베디드 장치, 특히 무선 라우터에 사용되는 리눅스 기반의 운영 체제. 제조사 펌웨어의 제한을 넘어 사용자가 장치를 자유롭게 제어하고, 다양한 기능을 추가할 수 있도록 해주는 것이 특징

2. 사용자가 원하는 대로 펌웨어 기능을 추가하거나 제거할 수 있음 ex) VPN 클라이언트 차단, 광고 차단, 네트워크 트래픽 분석 등

3. 꾸준한 보안 패치와 업데이트를 제공하며 기본 펌웨어보다 리소스 관리 효율성이 높음

4. 매우 다양한 라우터 모델을 지원하며 제조사가 미리 설치해둔 펌웨어를 사용하지 않고 나만의 목적에 맞게 사용할 수 있게 만들 수 있음

5. 요구 사항은 21.02 버전부터는 RAM 64MB / 플래시 8MB 이상(최소), RAM 128MB / 플래시 16MB 이상(권장)

● JSON
1. JSON(JavaScript Object Notation)은 사람과 컴퓨터가 모두 이해하기 쉬운 데이터 교환 형식. 주로 서버와 클라이언트 간의 데이터 통신에 사용. JavaScript에서 유래

2. 문법이 간단하고 데이터 크기가 작음. 키(key)와 값(value)의 쌍으로 구성되어 있어 사람이 보기에 직관적

3. Python, Java, C, C++ 등 다양한 언어와 호환. 복잡한 데이터를 구조적으로 표현하기에 용이

4. 키(key)와 값(value)의 쌍으로 이루어져 있으며 {}와 []를 사용해 객체와 배열을 표현  
ex)
{
    "name": "홍길동",                   <- name은 키(key), "홍길동"은 값(Valeu)
    "age": 30,
    "isStudent": false,
    "hobbies": ["독서", "영화 감상"],   <- hobbies는 배열
    "address": {                       <- address는 또 다른 JSON 객체의 값
        "city": "서울",
        "zipcode": "12345"
    }
}

● JSON 파서
1. JSON 파서(parser)는 JSON 데이터를 우리가 사용하는 프로그래밍 언어의 변수나 배열, 객체 등으로 바꿔주는 번역기 역할을 하며 크게 토큰화(tokenization)와 구문 분석(parsing)을 수행

2. 토큰화(tokenization) : JSON 데이터를 구성하는 문자열, 숫자, 괄호, 쉼표, 콜론 등을 의미 있는 '토큰' 단위로 분리 ex) {"name": "홍길동"} -> {, "name", :, "홍길동", }
   구문 분석(parsing) : 토큰화된 토큰들을 문법 규칙에 따라 분석하고, 프로그래밍 언어의 데이터 구조로 재구성
ex) 
- Python : JSON 모듈을 사용
import json

json_string = '{"name": "홍길동", "age": 30}'
data = json.loads(json_string)              <- JSON 문자열을 Dictionary(Python에서 key와 value 형태의 데이터를 저장하는 자료구조)로 변환

print(data['name'])                         <- 출력 : 홍길동

- JavaScript : JSON 객체를 사용
const jsonString = '{"name": "홍길동", "age": 30}';
const data = JSON.parse(jsonString);        <- JSON 문자열을 JavaScript 객체로 변환


console.log(data.name);                     <- 출력 : 홍길동

json.loads()나 JSON.parse()와 같은 함수가 JSON 파서의 역할을 수행. 

2-1. Python의 json 모듈과 JavaScript의 JSON 객체의 차이
구분        Python의 json 모듈                      JavaScript의 JSON 객체                 
종류        별도의 모듈                             언어의 내장 객체
사용 방식   import json으로 불러와서 사용            별도의 과정 없이 바로 사용 가능
기능        문자열과 파일 I/O를 모두 지원            주로 문자열 변환 기능 제공
